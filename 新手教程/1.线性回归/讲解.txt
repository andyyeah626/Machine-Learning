import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression

def true_fun(X):
    return 1.5*X + 0.2  //此处定义了一个线性函数，通常以y=f(x)的形式去逼近真实值，此处就是作为一个这样的模拟

np.random.seed(0)//random函数随机生成数据，但是通过seed去控制每次输出的序列一致，保证可复现性
n_samples = 30

X_train = np.sort(np.random.rand(n_samples))//rand函数生成0~1的数字
y_train = (true_fun(X_train) + np.random.randn(n_samples) * 0.05).reshape(n_samples, 1)

//reshape函数把向量变成竖直向量，是skleran的格式需求， np.random.randn(n_samples) * 0.05是添加噪声，类似于一种误差补偿机制，

model = LinearRegression()
model.fit( X_train.reshape(-1, 1), y_train)
//一般来说，model.fit(X_train,y_train)中第一个位置必须是二维向量。reshape(-1, 1)就是变成一个二维向量，类似于把
[1,2,3,4]变成
[[1,1],
[2,1]
[3,1]
[4,1]]

print("输出参数w：", model.coef_)
print("输出参数b：", model.intercept_)

X_test = np.linspace(0, 1, 100)
plt.plot(X_test, model.predict(X_test[:, np.newaxis]), label="Model")
plt.plot(X_test, true_fun(X_test), label="True function")
plt.scatter(X_train, y_train, edgecolor='b', s=20, label="Samples")
plt.legend()
plt.show()

